// <auto-generated />
using System;
using InsuranceTest.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InsuranceTest.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200202205825_SeedUser")]
    partial class SeedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InsuranceTest.API.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Charge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Charge = "Software developer",
                            FullName = "Bryan Espinoza López",
                            InitDate = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1000m
                        },
                        new
                        {
                            Id = 2,
                            Charge = "Project Manager",
                            FullName = "Josue Jara Sanchez",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 3000m
                        },
                        new
                        {
                            Id = 3,
                            Charge = "Software developer",
                            FullName = "Denia Barboza Grajal",
                            InitDate = new DateTime(2020, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1000m
                        },
                        new
                        {
                            Id = 4,
                            Charge = "Assistan Manager",
                            FullName = "Ivannia Lacayo Varquero",
                            InitDate = new DateTime(2015, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1500m
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<float>("Coverage")
                        .HasColumnType("real");

                    b.Property<int>("CoverageMonths")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RiskTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RiskTypeId");

                    b.ToTable("Insurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Coverage = 30f,
                            CoverageMonths = 4,
                            Description = "Poliza 1",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza",
                            Price = 1000m,
                            RiskTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 4,
                            Coverage = 60f,
                            CoverageMonths = 1,
                            Description = "Poliza 2",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza 2",
                            Price = 2000m,
                            RiskTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 2,
                            Coverage = 10f,
                            CoverageMonths = 2,
                            Description = "Poliza 3",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza 3",
                            Price = 5000m,
                            RiskTypeId = 4
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            Coverage = 100f,
                            CoverageMonths = 3,
                            Description = "Poliza 4",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza 4",
                            Price = 10000m,
                            RiskTypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 4,
                            Coverage = 50f,
                            CoverageMonths = 7,
                            Description = "Poliza 5",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza 5",
                            Price = 2000m,
                            RiskTypeId = 4
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 2,
                            Coverage = 25f,
                            CoverageMonths = 9,
                            Description = "Poliza 6",
                            InitDate = new DateTime(2017, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poliza 6",
                            Price = 5000m,
                            RiskTypeId = 3
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.InsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InsuranceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Terremoto"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Incendio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Robo"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pérdida"
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.Insurance_InsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsuranceTypeId");

                    b.ToTable("Insurances_InsuranceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InsuranceId = 1,
                            InsuranceTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            InsuranceId = 1,
                            InsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            InsuranceId = 2,
                            InsuranceTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            InsuranceId = 3,
                            InsuranceTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            InsuranceId = 3,
                            InsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            InsuranceId = 3,
                            InsuranceTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            InsuranceId = 4,
                            InsuranceTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            InsuranceId = 4,
                            InsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            InsuranceId = 5,
                            InsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            InsuranceId = 5,
                            InsuranceTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            InsuranceId = 5,
                            InsuranceTypeId = 4
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.RiskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Risk")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Risk = "Bajo"
                        },
                        new
                        {
                            Id = 2,
                            Risk = "Medio"
                        },
                        new
                        {
                            Id = 3,
                            Risk = "Medio-alto"
                        },
                        new
                        {
                            Id = 4,
                            Risk = "Alto"
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 48, 120, 56, 49, 70, 68, 53, 51, 54, 68, 51, 70, 49, 51, 56, 54, 55, 51, 48, 52, 66, 70, 48, 65, 68, 67, 66, 49, 48, 66, 51, 67, 52, 52, 55, 49, 51, 51, 53, 51, 52, 68, 67, 67, 57, 54, 52, 55, 53, 50, 48, 51, 69, 51, 49, 57, 52, 55, 53, 68, 66, 66, 54, 55, 51, 55, 68, 69, 69, 50, 48, 51, 48, 49, 67, 48, 69, 57, 50, 49, 69, 69, 48, 53, 52, 51, 54, 66, 67, 69, 70, 55, 53, 68, 48, 51, 50, 50, 52, 57, 50, 52, 50, 69, 65, 49, 50, 52, 51, 69, 55, 54, 53, 56, 49, 68, 57, 69, 51, 52, 52, 52, 49, 68, 52, 52, 55, 69, 49, 51, 48, 120, 56, 49, 70, 68, 53, 51, 54, 68, 51, 70, 49, 51, 56, 54, 55, 51, 48, 52, 66, 70, 48, 65, 68, 67, 66, 49, 48, 66, 51, 67, 52, 52, 55, 49, 51, 51, 53, 51, 52, 68, 67, 67, 57, 54, 52, 55, 53, 50, 48, 51, 69, 51, 49, 57, 52, 55, 53, 68, 66, 66, 54, 55, 51, 55, 68, 69, 69, 50, 48, 51, 48, 49, 67, 48, 69, 57, 50, 49, 69, 69, 48, 53, 52, 51, 54, 66, 67, 69, 70, 55, 53, 68, 48, 51, 50, 50, 52, 57, 50, 52, 50, 69, 65, 49, 50, 52, 51, 69, 55, 54, 53, 56, 49, 68, 57, 69, 51, 52, 52, 52, 49, 68, 52, 52, 55, 69, 49, 51 },
                            PasswordSalt = new byte[] { 48, 120, 69, 51, 68, 70, 49, 49, 65, 49, 55, 57, 68, 69, 68, 48, 52, 49, 52, 65, 67, 49, 52, 69, 67, 49, 66, 53, 53, 50, 67, 70, 49, 51, 55, 65, 53, 69, 55, 56, 57, 70, 65, 51, 56, 69, 48, 50, 56, 53, 68, 69, 51, 54, 57, 67, 51, 48, 49, 68, 66, 49, 65, 54, 56, 67, 49, 65, 66, 54, 54, 57, 49, 50, 53, 66, 51, 50, 49, 54, 57, 66, 68, 67, 68, 67, 67, 49, 57, 51, 67, 55, 56, 65, 52, 69, 67, 69, 66, 65, 53, 66, 70, 50, 65, 49, 66, 67, 56, 70, 49, 52, 70, 51, 68, 69, 68, 49, 52, 65, 67, 51, 54, 51, 66, 51, 53, 48, 69, 49, 65, 65, 66, 52, 48, 66, 67, 70, 66, 52, 68, 55, 50, 67, 49, 56, 54, 68, 51, 51, 68, 65, 53, 68, 53, 49, 50, 66, 48, 55, 50, 48, 66, 49, 57, 68, 56, 51, 54, 54, 69, 69, 68, 48, 56, 50, 52, 50, 51, 52, 65, 57, 55, 50, 69, 53, 56, 48, 51, 52, 67, 54, 65, 67, 69, 51, 67, 54, 51, 50, 51, 54, 67, 48, 49, 50, 67, 50, 69, 67, 57, 48, 49, 57, 65, 50, 57, 49, 51, 52, 57, 65, 51, 48, 53, 55, 67, 55, 65, 54, 55, 69, 48, 57, 66, 56, 68, 65, 70, 49, 66, 52, 48, 66, 51, 57, 54, 48, 50, 55, 48, 70, 51, 51, 57, 55, 54, 56 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InsuranceTest.API.Models.Insurance", b =>
                {
                    b.HasOne("InsuranceTest.API.Models.Client", "Client")
                        .WithMany("Insurances")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceTest.API.Models.RiskType", "RiskType")
                        .WithMany("Insurances")
                        .HasForeignKey("RiskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceTest.API.Models.Insurance_InsuranceType", b =>
                {
                    b.HasOne("InsuranceTest.API.Models.Insurance", "Insurance")
                        .WithMany("Insurances_InsuranceTypes")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceTest.API.Models.InsuranceType", "InsuranceType")
                        .WithMany("Insurances_InsuranceTypes")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
